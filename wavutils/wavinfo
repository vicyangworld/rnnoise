#!/bin/bash
#
# Copyright (C) 2014 Wenva <lvyexuwenfa100@126.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

set -e

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}

cmdcheck() {
    command -v $1>/dev/null 2>&1 || { error >&2 "Please install command $1 first."; exit 1; }   
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

curdir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    elif [ -L $0 ];then
        name=`readlink $0`
        echo $(dirname $name)
    else
        echo "`pwd`/$(dirname $0)"
    fi
}


#########################################
###           GROBLE DEFINE           ###
#########################################

VERSION=1.0.0
AUTHOR=smallmuou

#########################################
###             ARG PARSER            ###
#########################################

usage() {
cat << EOF
`basename $0` version $VERSION by $AUTHOR

USAGE: `basename $0` [OPTIONS] wavfile

DESCRIPTION:
    This script is a tool that show information of wav file.

    wavfile         the wav file path.

OPTIONS:
    -h              show this help message and exit.

SAMPLES:
    pcm2wav sample2.wav

EOF
exit 1
}

while getopts 'h' arg; do
    case $arg in
        h)
            usage
            ;;
        ?)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))

[ $# -ne 1 ] && usage
infile=$1

[ ! -f $infile ] && { error "The input wav file $infile does not exist."; exit -1; }

cmdcheck xxd

#########################################
###            MAIN ENTRY             ###
#########################################

filesize() {  
  /bin/ls -l $1|awk '{print $5  }'
}

# data
little_endian() {
    local i
    len=${#1}
    for (( i=$len; i>=2; i=i-2 ))
    do
        echo -n ${1:i-2:2}
    done
}

# length data
hex() {
    printf "%0$1x" $2
}

unhex() {
    echo $((16#$1))
}

#                        wav header(44 bytes)
#                        
#0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                        ChunkID(RIFF)                        | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                      ChunkSize(36 + PCMSIZE)                | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                        Format(WAVE)                         | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                        SubChunk1ID(fmt)                     | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                      SubChunkID1Size(16bytes)               | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|      AudioFormat(0x01)      |         Num Channels          | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                         SampleRate                          | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|    ByteRate(Num Channels x SampleRate x BitsPerSample/8)    | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|      BlockAlign(0x01)      |        BitsPerSample           | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                        SubChunk2ID(data)                    | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#|                      SubChunkID2Size(16bytes)               | 
#+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

header=`xxd -p -c 44 -l 44 $infile`

# check if wav file
[ ${header:0:8} != '52494646' ] && { error "The input file $infile is not a RIFF file."; exit -1; }
[ ${header:16:16} != '57415645666d7420' ] && { error "The input file $infile is not a wav format file."; exit -1; }
[ ${#header} -ne 88 ] && { error "The input file $infile is not a wav format file."; exit -1; }

cat << EOF
++++++++++++++++++++++++++++++++++++++++++++++
+          WAVEFORM INFORMATION              +
++++++++++++++++++++++++++++++++++++++++++++++
EOF

# name value
format() {
    printf "%16s:   %s\n" "$1" "$(unhex $(little_endian $2)) (0x$(little_endian $2))"
}

format "Audio Format" ${header:40:4}
format "Num Channels" ${header:44:4}
format "Sample Rate" ${header:48:8}
format "Bits Per Sample" ${header:68:4}
format "PCM Size" ${header:80:8}
